// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mps_coordinate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mps_coordinate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class MpsSHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MpsSHeader> {
} _MpsSHeader_default_instance_;
class MpsSPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MpsSPosition> {
} _MpsSPosition_default_instance_;
class MpsSWeatherDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MpsSWeather> {
} _MpsSWeather_default_instance_;
class MpsSAreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MpsSArea> {
} _MpsSArea_default_instance_;
class MpsSEquipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MpsSEquip> {
} _MpsSEquip_default_instance_;
class MpsSBLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MpsSBLine> {
} _MpsSBLine_default_instance_;
class MpsSORouteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MpsSORoute> {
} _MpsSORoute_default_instance_;
class MpsSPlaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MpsSPlane> {
} _MpsSPlane_default_instance_;

namespace protobuf_mps_5fcoordinate_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSHeader, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSHeader, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPosition, lng_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPosition, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPosition, h_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSWeather, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSWeather, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSWeather, wtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSWeather, wclass_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSArea, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSArea, areatype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSEquip, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSEquip, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSEquip, sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSEquip, comm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSEquip, jammer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSEquip, weapon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSBLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSBLine, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSBLine, linetype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSORoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSORoute, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSORoute, routetype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPlane, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPlane, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPlane, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPlane, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpsSPlane, yaw_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(MpsSHeader)},
  { 7, -1, sizeof(MpsSPosition)},
  { 15, -1, sizeof(MpsSWeather)},
  { 23, -1, sizeof(MpsSArea)},
  { 30, -1, sizeof(MpsSEquip)},
  { 41, -1, sizeof(MpsSBLine)},
  { 48, -1, sizeof(MpsSORoute)},
  { 55, -1, sizeof(MpsSPlane)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MpsSHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MpsSPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MpsSWeather_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MpsSArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MpsSEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MpsSBLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MpsSORoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MpsSPlane_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mps_coordinate.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _MpsSHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MpsSPosition_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MpsSWeather_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MpsSArea_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _MpsSEquip_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _MpsSBLine_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _MpsSORoute_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MpsSPlane_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MpsSHeader_default_instance_.DefaultConstruct();
  _MpsSPosition_default_instance_.DefaultConstruct();
  _MpsSWeather_default_instance_.DefaultConstruct();
  _MpsSArea_default_instance_.DefaultConstruct();
  _MpsSEquip_default_instance_.DefaultConstruct();
  _MpsSBLine_default_instance_.DefaultConstruct();
  _MpsSORoute_default_instance_.DefaultConstruct();
  _MpsSPlane_default_instance_.DefaultConstruct();
  _MpsSWeather_default_instance_.get_mutable()->head_ = const_cast< ::MpsSHeader*>(
      ::MpsSHeader::internal_default_instance());
  _MpsSArea_default_instance_.get_mutable()->head_ = const_cast< ::MpsSHeader*>(
      ::MpsSHeader::internal_default_instance());
  _MpsSEquip_default_instance_.get_mutable()->head_ = const_cast< ::MpsSHeader*>(
      ::MpsSHeader::internal_default_instance());
  _MpsSEquip_default_instance_.get_mutable()->pos_ = const_cast< ::MpsSPosition*>(
      ::MpsSPosition::internal_default_instance());
  _MpsSBLine_default_instance_.get_mutable()->head_ = const_cast< ::MpsSHeader*>(
      ::MpsSHeader::internal_default_instance());
  _MpsSORoute_default_instance_.get_mutable()->head_ = const_cast< ::MpsSHeader*>(
      ::MpsSHeader::internal_default_instance());
  _MpsSPlane_default_instance_.get_mutable()->head_ = const_cast< ::MpsSHeader*>(
      ::MpsSHeader::internal_default_instance());
  _MpsSPlane_default_instance_.get_mutable()->pos_ = const_cast< ::MpsSPosition*>(
      ::MpsSPosition::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024mps_coordinate.proto\"&\n\nMpsSHeader\022\014\n\004"
      "time\030\001 \001(\001\022\n\n\002id\030\002 \001(\r\"3\n\014MpsSPosition\022\013"
      "\n\003lng\030\003 \001(\002\022\013\n\003lat\030\004 \001(\002\022\t\n\001h\030\005 \001(\002\"\236\002\n\013"
      "MpsSWeather\022\031\n\004head\030\001 \001(\0132\013.MpsSHeader\022!"
      "\n\005wType\030\002 \001(\0162\022.MpsSWeather.WType\022#\n\006wCl"
      "ass\030\003 \001(\0162\023.MpsSWeather.WClass\"r\n\005WType\022"
      "\016\n\nWIND_SHEAR\020\000\022\021\n\rTHUNDER_STORM\020\001\022\010\n\004RA"
      "IN\020\002\022\010\n\004SNOW\020\003\022\016\n\nHAIL_STONE\020\004\022\016\n\nSAND_S"
      "TORM\020\005\022\007\n\003FOG\020\006\022\t\n\005CLOUD\020\007\"8\n\006WClass\022\n\n\006"
      "NORMAL\020\000\022\t\n\005MINOR\020\001\022\t\n\005MAJOR\020\002\022\014\n\010CRITIC"
      "AL\020\003\"\220\002\n\010MpsSArea\022\031\n\004head\030\001 \001(\0132\013.MpsSHe"
      "ader\022$\n\010areaType\030\002 \001(\0162\022.MpsSArea.AreaTy"
      "pe\"\302\001\n\010AreaType\022\r\n\tTASK_AREA\020\000\022\016\n\nFORCE_"
      "AREA\020\001\022\016\n\nNOFLY_ZONE\020\002\022\020\n\014CONTROL_AREA\020\003"
      "\022\023\n\017RESTRICTED_AREA\020\004\022\027\n\023IDENTIFICATION_"
      "ZONE\020\005\022\022\n\016LIABILITY_AREA\020\006\022\017\n\013COMBAT_ZON"
      "E\020\007\022\020\n\014DEFENSE_ZONE\020\010\022\020\n\014WARNING_AREA\020\t\""
      "\200\001\n\tMpsSEquip\022\031\n\004head\030\001 \001(\0132\013.MpsSHeader"
      "\022\032\n\003pos\030\002 \001(\0132\r.MpsSPosition\022\016\n\006sensor\030\003"
      " \001(\002\022\014\n\004comm\030\004 \001(\002\022\016\n\006jammer\030\005 \001(\002\022\016\n\006we"
      "apon\030\006 \001(\002\"x\n\tMpsSBLine\022\031\n\004head\030\001 \001(\0132\013."
      "MpsSHeader\022%\n\010lineType\030\002 \001(\0162\023.MpsSBLine"
      ".LineType\")\n\010LineType\022\r\n\tAIR_BOUND\020\000\022\016\n\n"
      "FRONT_LINE\020\001\"\221\001\n\nMpsSORoute\022\031\n\004head\030\001 \001("
      "\0132\013.MpsSHeader\022(\n\trouteType\030\002 \001(\0162\025.MpsS"
      "ORoute.RouteType\">\n\tRouteType\022\017\n\013FRIEND_"
      "LINE\020\000\022\016\n\nCIVIL_LINE\020\001\022\020\n\014AIR_CORRIDOR\020\002"
      "\"l\n\tMpsSPlane\022\031\n\004head\030\001 \001(\0132\013.MpsSHeader"
      "\022\032\n\003pos\030\002 \001(\0132\r.MpsSPosition\022\014\n\004roll\030\003 \001"
      "(\002\022\r\n\005pitch\030\004 \001(\002\022\013\n\003yaw\030\005 \001(\002B\003\370\001\001b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mps_coordinate.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mps_5fcoordinate_2eproto

const ::google::protobuf::EnumDescriptor* MpsSWeather_WType_descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_enum_descriptors[0];
}
bool MpsSWeather_WType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MpsSWeather_WType MpsSWeather::WIND_SHEAR;
const MpsSWeather_WType MpsSWeather::THUNDER_STORM;
const MpsSWeather_WType MpsSWeather::RAIN;
const MpsSWeather_WType MpsSWeather::SNOW;
const MpsSWeather_WType MpsSWeather::HAIL_STONE;
const MpsSWeather_WType MpsSWeather::SAND_STORM;
const MpsSWeather_WType MpsSWeather::FOG;
const MpsSWeather_WType MpsSWeather::CLOUD;
const MpsSWeather_WType MpsSWeather::WType_MIN;
const MpsSWeather_WType MpsSWeather::WType_MAX;
const int MpsSWeather::WType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MpsSWeather_WClass_descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_enum_descriptors[1];
}
bool MpsSWeather_WClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MpsSWeather_WClass MpsSWeather::NORMAL;
const MpsSWeather_WClass MpsSWeather::MINOR;
const MpsSWeather_WClass MpsSWeather::MAJOR;
const MpsSWeather_WClass MpsSWeather::CRITICAL;
const MpsSWeather_WClass MpsSWeather::WClass_MIN;
const MpsSWeather_WClass MpsSWeather::WClass_MAX;
const int MpsSWeather::WClass_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MpsSArea_AreaType_descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_enum_descriptors[2];
}
bool MpsSArea_AreaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MpsSArea_AreaType MpsSArea::TASK_AREA;
const MpsSArea_AreaType MpsSArea::FORCE_AREA;
const MpsSArea_AreaType MpsSArea::NOFLY_ZONE;
const MpsSArea_AreaType MpsSArea::CONTROL_AREA;
const MpsSArea_AreaType MpsSArea::RESTRICTED_AREA;
const MpsSArea_AreaType MpsSArea::IDENTIFICATION_ZONE;
const MpsSArea_AreaType MpsSArea::LIABILITY_AREA;
const MpsSArea_AreaType MpsSArea::COMBAT_ZONE;
const MpsSArea_AreaType MpsSArea::DEFENSE_ZONE;
const MpsSArea_AreaType MpsSArea::WARNING_AREA;
const MpsSArea_AreaType MpsSArea::AreaType_MIN;
const MpsSArea_AreaType MpsSArea::AreaType_MAX;
const int MpsSArea::AreaType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MpsSBLine_LineType_descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_enum_descriptors[3];
}
bool MpsSBLine_LineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MpsSBLine_LineType MpsSBLine::AIR_BOUND;
const MpsSBLine_LineType MpsSBLine::FRONT_LINE;
const MpsSBLine_LineType MpsSBLine::LineType_MIN;
const MpsSBLine_LineType MpsSBLine::LineType_MAX;
const int MpsSBLine::LineType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MpsSORoute_RouteType_descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_enum_descriptors[4];
}
bool MpsSORoute_RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MpsSORoute_RouteType MpsSORoute::FRIEND_LINE;
const MpsSORoute_RouteType MpsSORoute::CIVIL_LINE;
const MpsSORoute_RouteType MpsSORoute::AIR_CORRIDOR;
const MpsSORoute_RouteType MpsSORoute::RouteType_MIN;
const MpsSORoute_RouteType MpsSORoute::RouteType_MAX;
const int MpsSORoute::RouteType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpsSHeader::kTimeFieldNumber;
const int MpsSHeader::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpsSHeader::MpsSHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpsSHeader)
}
MpsSHeader::MpsSHeader(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MpsSHeader)
}
MpsSHeader::MpsSHeader(const MpsSHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&time_) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:MpsSHeader)
}

void MpsSHeader::SharedCtor() {
  ::memset(&time_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&time_) + sizeof(id_));
  _cached_size_ = 0;
}

MpsSHeader::~MpsSHeader() {
  // @@protoc_insertion_point(destructor:MpsSHeader)
  SharedDtor();
}

void MpsSHeader::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void MpsSHeader::ArenaDtor(void* object) {
  MpsSHeader* _this = reinterpret_cast< MpsSHeader* >(object);
  (void)_this;
}
void MpsSHeader::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MpsSHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpsSHeader::descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpsSHeader& MpsSHeader::default_instance() {
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MpsSHeader* MpsSHeader::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MpsSHeader>(arena);
}

void MpsSHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MpsSHeader)
  ::memset(&time_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&time_) + sizeof(id_));
}

bool MpsSHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MpsSHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpsSHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpsSHeader)
  return false;
#undef DO_
}

void MpsSHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpsSHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:MpsSHeader)
}

::google::protobuf::uint8* MpsSHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MpsSHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MpsSHeader)
  return target;
}

size_t MpsSHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpsSHeader)
  size_t total_size = 0;

  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpsSHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MpsSHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MpsSHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpsSHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MpsSHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MpsSHeader)
    MergeFrom(*source);
  }
}

void MpsSHeader::MergeFrom(const MpsSHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpsSHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void MpsSHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MpsSHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpsSHeader::CopyFrom(const MpsSHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpsSHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpsSHeader::IsInitialized() const {
  return true;
}

void MpsSHeader::Swap(MpsSHeader* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MpsSHeader* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MpsSHeader::UnsafeArenaSwap(MpsSHeader* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MpsSHeader::InternalSwap(MpsSHeader* other) {
  std::swap(time_, other->time_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpsSHeader::GetMetadata() const {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MpsSHeader

// double time = 1;
void MpsSHeader::clear_time() {
  time_ = 0;
}
double MpsSHeader::time() const {
  // @@protoc_insertion_point(field_get:MpsSHeader.time)
  return time_;
}
void MpsSHeader::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:MpsSHeader.time)
}

// uint32 id = 2;
void MpsSHeader::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 MpsSHeader::id() const {
  // @@protoc_insertion_point(field_get:MpsSHeader.id)
  return id_;
}
void MpsSHeader::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:MpsSHeader.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpsSPosition::kLngFieldNumber;
const int MpsSPosition::kLatFieldNumber;
const int MpsSPosition::kHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpsSPosition::MpsSPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpsSPosition)
}
MpsSPosition::MpsSPosition(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MpsSPosition)
}
MpsSPosition::MpsSPosition(const MpsSPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lng_, &from.lng_,
    reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&lng_) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:MpsSPosition)
}

void MpsSPosition::SharedCtor() {
  ::memset(&lng_, 0, reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&lng_) + sizeof(h_));
  _cached_size_ = 0;
}

MpsSPosition::~MpsSPosition() {
  // @@protoc_insertion_point(destructor:MpsSPosition)
  SharedDtor();
}

void MpsSPosition::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void MpsSPosition::ArenaDtor(void* object) {
  MpsSPosition* _this = reinterpret_cast< MpsSPosition* >(object);
  (void)_this;
}
void MpsSPosition::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MpsSPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpsSPosition::descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpsSPosition& MpsSPosition::default_instance() {
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MpsSPosition* MpsSPosition::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MpsSPosition>(arena);
}

void MpsSPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:MpsSPosition)
  ::memset(&lng_, 0, reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&lng_) + sizeof(h_));
}

bool MpsSPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MpsSPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float lng = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float h = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpsSPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpsSPosition)
  return false;
#undef DO_
}

void MpsSPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpsSPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lng = 3;
  if (this->lng() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lng(), output);
  }

  // float lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lat(), output);
  }

  // float h = 5;
  if (this->h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->h(), output);
  }

  // @@protoc_insertion_point(serialize_end:MpsSPosition)
}

::google::protobuf::uint8* MpsSPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MpsSPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lng = 3;
  if (this->lng() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lng(), target);
  }

  // float lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lat(), target);
  }

  // float h = 5;
  if (this->h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->h(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MpsSPosition)
  return target;
}

size_t MpsSPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpsSPosition)
  size_t total_size = 0;

  // float lng = 3;
  if (this->lng() != 0) {
    total_size += 1 + 4;
  }

  // float lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 4;
  }

  // float h = 5;
  if (this->h() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpsSPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MpsSPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const MpsSPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpsSPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MpsSPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MpsSPosition)
    MergeFrom(*source);
  }
}

void MpsSPosition::MergeFrom(const MpsSPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpsSPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lng() != 0) {
    set_lng(from.lng());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.h() != 0) {
    set_h(from.h());
  }
}

void MpsSPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MpsSPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpsSPosition::CopyFrom(const MpsSPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpsSPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpsSPosition::IsInitialized() const {
  return true;
}

void MpsSPosition::Swap(MpsSPosition* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MpsSPosition* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MpsSPosition::UnsafeArenaSwap(MpsSPosition* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MpsSPosition::InternalSwap(MpsSPosition* other) {
  std::swap(lng_, other->lng_);
  std::swap(lat_, other->lat_);
  std::swap(h_, other->h_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpsSPosition::GetMetadata() const {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MpsSPosition

// float lng = 3;
void MpsSPosition::clear_lng() {
  lng_ = 0;
}
float MpsSPosition::lng() const {
  // @@protoc_insertion_point(field_get:MpsSPosition.lng)
  return lng_;
}
void MpsSPosition::set_lng(float value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:MpsSPosition.lng)
}

// float lat = 4;
void MpsSPosition::clear_lat() {
  lat_ = 0;
}
float MpsSPosition::lat() const {
  // @@protoc_insertion_point(field_get:MpsSPosition.lat)
  return lat_;
}
void MpsSPosition::set_lat(float value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:MpsSPosition.lat)
}

// float h = 5;
void MpsSPosition::clear_h() {
  h_ = 0;
}
float MpsSPosition::h() const {
  // @@protoc_insertion_point(field_get:MpsSPosition.h)
  return h_;
}
void MpsSPosition::set_h(float value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:MpsSPosition.h)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MpsSWeather::_slow_mutable_head() {
  head_ = ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
      GetArenaNoVirtual());
}
::MpsSHeader* MpsSWeather::_slow_release_head() {
  if (head_ == NULL) {
    return NULL;
  } else {
    ::MpsSHeader* temp = new ::MpsSHeader(*head_);
    head_ = NULL;
    return temp;
  }
}
::MpsSHeader* MpsSWeather::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MpsSWeather.head)
  
  ::MpsSHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void MpsSWeather::_slow_set_allocated_head(
    ::google::protobuf::Arena* message_arena, ::MpsSHeader** head) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*head) == NULL) {
      message_arena->Own(*head);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*head)) {
      ::MpsSHeader* new_head = 
            ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
            message_arena);
      new_head->CopyFrom(**head);
      *head = new_head;
    }
}
void MpsSWeather::unsafe_arena_set_allocated_head(
    ::MpsSHeader* head) {
  if (GetArenaNoVirtual() == NULL) {
    delete head_;
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MpsSWeather.head)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpsSWeather::kHeadFieldNumber;
const int MpsSWeather::kWTypeFieldNumber;
const int MpsSWeather::kWClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpsSWeather::MpsSWeather()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpsSWeather)
}
MpsSWeather::MpsSWeather(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MpsSWeather)
}
MpsSWeather::MpsSWeather(const MpsSWeather& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::MpsSHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&wtype_, &from.wtype_,
    reinterpret_cast<char*>(&wclass_) -
    reinterpret_cast<char*>(&wtype_) + sizeof(wclass_));
  // @@protoc_insertion_point(copy_constructor:MpsSWeather)
}

void MpsSWeather::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&wclass_) -
    reinterpret_cast<char*>(&head_) + sizeof(wclass_));
  _cached_size_ = 0;
}

MpsSWeather::~MpsSWeather() {
  // @@protoc_insertion_point(destructor:MpsSWeather)
  SharedDtor();
}

void MpsSWeather::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete head_;
  }
}

void MpsSWeather::ArenaDtor(void* object) {
  MpsSWeather* _this = reinterpret_cast< MpsSWeather* >(object);
  (void)_this;
}
void MpsSWeather::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MpsSWeather::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpsSWeather::descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpsSWeather& MpsSWeather::default_instance() {
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MpsSWeather* MpsSWeather::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MpsSWeather>(arena);
}

void MpsSWeather::Clear() {
// @@protoc_insertion_point(message_clear_start:MpsSWeather)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  ::memset(&wtype_, 0, reinterpret_cast<char*>(&wclass_) -
    reinterpret_cast<char*>(&wtype_) + sizeof(wclass_));
}

bool MpsSWeather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MpsSWeather)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MpsSHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpsSWeather.WType wType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wtype(static_cast< ::MpsSWeather_WType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpsSWeather.WClass wClass = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wclass(static_cast< ::MpsSWeather_WClass >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpsSWeather)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpsSWeather)
  return false;
#undef DO_
}

void MpsSWeather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpsSWeather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .MpsSWeather.WType wType = 2;
  if (this->wtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->wtype(), output);
  }

  // .MpsSWeather.WClass wClass = 3;
  if (this->wclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->wclass(), output);
  }

  // @@protoc_insertion_point(serialize_end:MpsSWeather)
}

::google::protobuf::uint8* MpsSWeather::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MpsSWeather)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .MpsSWeather.WType wType = 2;
  if (this->wtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->wtype(), target);
  }

  // .MpsSWeather.WClass wClass = 3;
  if (this->wclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->wclass(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MpsSWeather)
  return target;
}

size_t MpsSWeather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpsSWeather)
  size_t total_size = 0;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .MpsSWeather.WType wType = 2;
  if (this->wtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wtype());
  }

  // .MpsSWeather.WClass wClass = 3;
  if (this->wclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wclass());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpsSWeather::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MpsSWeather)
  GOOGLE_DCHECK_NE(&from, this);
  const MpsSWeather* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpsSWeather>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MpsSWeather)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MpsSWeather)
    MergeFrom(*source);
  }
}

void MpsSWeather::MergeFrom(const MpsSWeather& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpsSWeather)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::MpsSHeader::MergeFrom(from.head());
  }
  if (from.wtype() != 0) {
    set_wtype(from.wtype());
  }
  if (from.wclass() != 0) {
    set_wclass(from.wclass());
  }
}

void MpsSWeather::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MpsSWeather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpsSWeather::CopyFrom(const MpsSWeather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpsSWeather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpsSWeather::IsInitialized() const {
  return true;
}

void MpsSWeather::Swap(MpsSWeather* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MpsSWeather* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MpsSWeather::UnsafeArenaSwap(MpsSWeather* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MpsSWeather::InternalSwap(MpsSWeather* other) {
  std::swap(head_, other->head_);
  std::swap(wtype_, other->wtype_);
  std::swap(wclass_, other->wclass_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpsSWeather::GetMetadata() const {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MpsSWeather

// .MpsSHeader head = 1;
bool MpsSWeather::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void MpsSWeather::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::MpsSHeader& MpsSWeather::head() const {
  // @@protoc_insertion_point(field_get:MpsSWeather.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
::MpsSHeader* MpsSWeather::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSWeather.head)
  return head_;
}
::MpsSHeader* MpsSWeather::release_head() {
  // @@protoc_insertion_point(field_release:MpsSWeather.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
 void MpsSWeather::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSWeather.head)
}

// .MpsSWeather.WType wType = 2;
void MpsSWeather::clear_wtype() {
  wtype_ = 0;
}
::MpsSWeather_WType MpsSWeather::wtype() const {
  // @@protoc_insertion_point(field_get:MpsSWeather.wType)
  return static_cast< ::MpsSWeather_WType >(wtype_);
}
void MpsSWeather::set_wtype(::MpsSWeather_WType value) {
  
  wtype_ = value;
  // @@protoc_insertion_point(field_set:MpsSWeather.wType)
}

// .MpsSWeather.WClass wClass = 3;
void MpsSWeather::clear_wclass() {
  wclass_ = 0;
}
::MpsSWeather_WClass MpsSWeather::wclass() const {
  // @@protoc_insertion_point(field_get:MpsSWeather.wClass)
  return static_cast< ::MpsSWeather_WClass >(wclass_);
}
void MpsSWeather::set_wclass(::MpsSWeather_WClass value) {
  
  wclass_ = value;
  // @@protoc_insertion_point(field_set:MpsSWeather.wClass)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MpsSArea::_slow_mutable_head() {
  head_ = ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
      GetArenaNoVirtual());
}
::MpsSHeader* MpsSArea::_slow_release_head() {
  if (head_ == NULL) {
    return NULL;
  } else {
    ::MpsSHeader* temp = new ::MpsSHeader(*head_);
    head_ = NULL;
    return temp;
  }
}
::MpsSHeader* MpsSArea::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MpsSArea.head)
  
  ::MpsSHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void MpsSArea::_slow_set_allocated_head(
    ::google::protobuf::Arena* message_arena, ::MpsSHeader** head) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*head) == NULL) {
      message_arena->Own(*head);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*head)) {
      ::MpsSHeader* new_head = 
            ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
            message_arena);
      new_head->CopyFrom(**head);
      *head = new_head;
    }
}
void MpsSArea::unsafe_arena_set_allocated_head(
    ::MpsSHeader* head) {
  if (GetArenaNoVirtual() == NULL) {
    delete head_;
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MpsSArea.head)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpsSArea::kHeadFieldNumber;
const int MpsSArea::kAreaTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpsSArea::MpsSArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpsSArea)
}
MpsSArea::MpsSArea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MpsSArea)
}
MpsSArea::MpsSArea(const MpsSArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::MpsSHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  areatype_ = from.areatype_;
  // @@protoc_insertion_point(copy_constructor:MpsSArea)
}

void MpsSArea::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&areatype_) -
    reinterpret_cast<char*>(&head_) + sizeof(areatype_));
  _cached_size_ = 0;
}

MpsSArea::~MpsSArea() {
  // @@protoc_insertion_point(destructor:MpsSArea)
  SharedDtor();
}

void MpsSArea::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete head_;
  }
}

void MpsSArea::ArenaDtor(void* object) {
  MpsSArea* _this = reinterpret_cast< MpsSArea* >(object);
  (void)_this;
}
void MpsSArea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MpsSArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpsSArea::descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpsSArea& MpsSArea::default_instance() {
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MpsSArea* MpsSArea::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MpsSArea>(arena);
}

void MpsSArea::Clear() {
// @@protoc_insertion_point(message_clear_start:MpsSArea)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  areatype_ = 0;
}

bool MpsSArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MpsSArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MpsSHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpsSArea.AreaType areaType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_areatype(static_cast< ::MpsSArea_AreaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpsSArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpsSArea)
  return false;
#undef DO_
}

void MpsSArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpsSArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .MpsSArea.AreaType areaType = 2;
  if (this->areatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->areatype(), output);
  }

  // @@protoc_insertion_point(serialize_end:MpsSArea)
}

::google::protobuf::uint8* MpsSArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MpsSArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .MpsSArea.AreaType areaType = 2;
  if (this->areatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->areatype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MpsSArea)
  return target;
}

size_t MpsSArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpsSArea)
  size_t total_size = 0;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .MpsSArea.AreaType areaType = 2;
  if (this->areatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->areatype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpsSArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MpsSArea)
  GOOGLE_DCHECK_NE(&from, this);
  const MpsSArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpsSArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MpsSArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MpsSArea)
    MergeFrom(*source);
  }
}

void MpsSArea::MergeFrom(const MpsSArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpsSArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::MpsSHeader::MergeFrom(from.head());
  }
  if (from.areatype() != 0) {
    set_areatype(from.areatype());
  }
}

void MpsSArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MpsSArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpsSArea::CopyFrom(const MpsSArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpsSArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpsSArea::IsInitialized() const {
  return true;
}

void MpsSArea::Swap(MpsSArea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MpsSArea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MpsSArea::UnsafeArenaSwap(MpsSArea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MpsSArea::InternalSwap(MpsSArea* other) {
  std::swap(head_, other->head_);
  std::swap(areatype_, other->areatype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpsSArea::GetMetadata() const {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MpsSArea

// .MpsSHeader head = 1;
bool MpsSArea::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void MpsSArea::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::MpsSHeader& MpsSArea::head() const {
  // @@protoc_insertion_point(field_get:MpsSArea.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
::MpsSHeader* MpsSArea::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSArea.head)
  return head_;
}
::MpsSHeader* MpsSArea::release_head() {
  // @@protoc_insertion_point(field_release:MpsSArea.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
 void MpsSArea::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSArea.head)
}

// .MpsSArea.AreaType areaType = 2;
void MpsSArea::clear_areatype() {
  areatype_ = 0;
}
::MpsSArea_AreaType MpsSArea::areatype() const {
  // @@protoc_insertion_point(field_get:MpsSArea.areaType)
  return static_cast< ::MpsSArea_AreaType >(areatype_);
}
void MpsSArea::set_areatype(::MpsSArea_AreaType value) {
  
  areatype_ = value;
  // @@protoc_insertion_point(field_set:MpsSArea.areaType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MpsSEquip::_slow_mutable_head() {
  head_ = ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
      GetArenaNoVirtual());
}
::MpsSHeader* MpsSEquip::_slow_release_head() {
  if (head_ == NULL) {
    return NULL;
  } else {
    ::MpsSHeader* temp = new ::MpsSHeader(*head_);
    head_ = NULL;
    return temp;
  }
}
::MpsSHeader* MpsSEquip::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MpsSEquip.head)
  
  ::MpsSHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void MpsSEquip::_slow_set_allocated_head(
    ::google::protobuf::Arena* message_arena, ::MpsSHeader** head) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*head) == NULL) {
      message_arena->Own(*head);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*head)) {
      ::MpsSHeader* new_head = 
            ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
            message_arena);
      new_head->CopyFrom(**head);
      *head = new_head;
    }
}
void MpsSEquip::unsafe_arena_set_allocated_head(
    ::MpsSHeader* head) {
  if (GetArenaNoVirtual() == NULL) {
    delete head_;
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MpsSEquip.head)
}
void MpsSEquip::_slow_mutable_pos() {
  pos_ = ::google::protobuf::Arena::CreateMessage< ::MpsSPosition >(
      GetArenaNoVirtual());
}
::MpsSPosition* MpsSEquip::_slow_release_pos() {
  if (pos_ == NULL) {
    return NULL;
  } else {
    ::MpsSPosition* temp = new ::MpsSPosition(*pos_);
    pos_ = NULL;
    return temp;
  }
}
::MpsSPosition* MpsSEquip::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MpsSEquip.pos)
  
  ::MpsSPosition* temp = pos_;
  pos_ = NULL;
  return temp;
}
void MpsSEquip::_slow_set_allocated_pos(
    ::google::protobuf::Arena* message_arena, ::MpsSPosition** pos) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*pos) == NULL) {
      message_arena->Own(*pos);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*pos)) {
      ::MpsSPosition* new_pos = 
            ::google::protobuf::Arena::CreateMessage< ::MpsSPosition >(
            message_arena);
      new_pos->CopyFrom(**pos);
      *pos = new_pos;
    }
}
void MpsSEquip::unsafe_arena_set_allocated_pos(
    ::MpsSPosition* pos) {
  if (GetArenaNoVirtual() == NULL) {
    delete pos_;
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MpsSEquip.pos)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpsSEquip::kHeadFieldNumber;
const int MpsSEquip::kPosFieldNumber;
const int MpsSEquip::kSensorFieldNumber;
const int MpsSEquip::kCommFieldNumber;
const int MpsSEquip::kJammerFieldNumber;
const int MpsSEquip::kWeaponFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpsSEquip::MpsSEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpsSEquip)
}
MpsSEquip::MpsSEquip(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MpsSEquip)
}
MpsSEquip::MpsSEquip(const MpsSEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::MpsSHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  if (from.has_pos()) {
    pos_ = new ::MpsSPosition(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&sensor_, &from.sensor_,
    reinterpret_cast<char*>(&weapon_) -
    reinterpret_cast<char*>(&sensor_) + sizeof(weapon_));
  // @@protoc_insertion_point(copy_constructor:MpsSEquip)
}

void MpsSEquip::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&weapon_) -
    reinterpret_cast<char*>(&head_) + sizeof(weapon_));
  _cached_size_ = 0;
}

MpsSEquip::~MpsSEquip() {
  // @@protoc_insertion_point(destructor:MpsSEquip)
  SharedDtor();
}

void MpsSEquip::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete head_;
  }
  if (this != internal_default_instance()) {
    delete pos_;
  }
}

void MpsSEquip::ArenaDtor(void* object) {
  MpsSEquip* _this = reinterpret_cast< MpsSEquip* >(object);
  (void)_this;
}
void MpsSEquip::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MpsSEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpsSEquip::descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpsSEquip& MpsSEquip::default_instance() {
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MpsSEquip* MpsSEquip::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MpsSEquip>(arena);
}

void MpsSEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:MpsSEquip)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  ::memset(&sensor_, 0, reinterpret_cast<char*>(&weapon_) -
    reinterpret_cast<char*>(&sensor_) + sizeof(weapon_));
}

bool MpsSEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MpsSEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MpsSHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpsSPosition pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sensor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float comm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &comm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float jammer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jammer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float weapon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weapon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpsSEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpsSEquip)
  return false;
#undef DO_
}

void MpsSEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpsSEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .MpsSPosition pos = 2;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // float sensor = 3;
  if (this->sensor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sensor(), output);
  }

  // float comm = 4;
  if (this->comm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->comm(), output);
  }

  // float jammer = 5;
  if (this->jammer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->jammer(), output);
  }

  // float weapon = 6;
  if (this->weapon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->weapon(), output);
  }

  // @@protoc_insertion_point(serialize_end:MpsSEquip)
}

::google::protobuf::uint8* MpsSEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MpsSEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .MpsSPosition pos = 2;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, deterministic, target);
  }

  // float sensor = 3;
  if (this->sensor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sensor(), target);
  }

  // float comm = 4;
  if (this->comm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->comm(), target);
  }

  // float jammer = 5;
  if (this->jammer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->jammer(), target);
  }

  // float weapon = 6;
  if (this->weapon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->weapon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MpsSEquip)
  return target;
}

size_t MpsSEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpsSEquip)
  size_t total_size = 0;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .MpsSPosition pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // float sensor = 3;
  if (this->sensor() != 0) {
    total_size += 1 + 4;
  }

  // float comm = 4;
  if (this->comm() != 0) {
    total_size += 1 + 4;
  }

  // float jammer = 5;
  if (this->jammer() != 0) {
    total_size += 1 + 4;
  }

  // float weapon = 6;
  if (this->weapon() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpsSEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MpsSEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const MpsSEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpsSEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MpsSEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MpsSEquip)
    MergeFrom(*source);
  }
}

void MpsSEquip::MergeFrom(const MpsSEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpsSEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::MpsSHeader::MergeFrom(from.head());
  }
  if (from.has_pos()) {
    mutable_pos()->::MpsSPosition::MergeFrom(from.pos());
  }
  if (from.sensor() != 0) {
    set_sensor(from.sensor());
  }
  if (from.comm() != 0) {
    set_comm(from.comm());
  }
  if (from.jammer() != 0) {
    set_jammer(from.jammer());
  }
  if (from.weapon() != 0) {
    set_weapon(from.weapon());
  }
}

void MpsSEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MpsSEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpsSEquip::CopyFrom(const MpsSEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpsSEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpsSEquip::IsInitialized() const {
  return true;
}

void MpsSEquip::Swap(MpsSEquip* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MpsSEquip* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MpsSEquip::UnsafeArenaSwap(MpsSEquip* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MpsSEquip::InternalSwap(MpsSEquip* other) {
  std::swap(head_, other->head_);
  std::swap(pos_, other->pos_);
  std::swap(sensor_, other->sensor_);
  std::swap(comm_, other->comm_);
  std::swap(jammer_, other->jammer_);
  std::swap(weapon_, other->weapon_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpsSEquip::GetMetadata() const {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MpsSEquip

// .MpsSHeader head = 1;
bool MpsSEquip::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void MpsSEquip::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::MpsSHeader& MpsSEquip::head() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
::MpsSHeader* MpsSEquip::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSEquip.head)
  return head_;
}
::MpsSHeader* MpsSEquip::release_head() {
  // @@protoc_insertion_point(field_release:MpsSEquip.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
 void MpsSEquip::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSEquip.head)
}

// .MpsSPosition pos = 2;
bool MpsSEquip::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void MpsSEquip::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::MpsSPosition& MpsSEquip::pos() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.pos)
  return pos_ != NULL ? *pos_
                         : *::MpsSPosition::internal_default_instance();
}
::MpsSPosition* MpsSEquip::mutable_pos() {
  
  if (pos_ == NULL) {
    _slow_mutable_pos();
  }
  // @@protoc_insertion_point(field_mutable:MpsSEquip.pos)
  return pos_;
}
::MpsSPosition* MpsSEquip::release_pos() {
  // @@protoc_insertion_point(field_release:MpsSEquip.pos)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pos();
  } else {
    ::MpsSPosition* temp = pos_;
    pos_ = NULL;
    return temp;
  }
}
 void MpsSEquip::set_allocated_pos(::MpsSPosition* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos != NULL) {
    _slow_set_allocated_pos(message_arena, &pos);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSEquip.pos)
}

// float sensor = 3;
void MpsSEquip::clear_sensor() {
  sensor_ = 0;
}
float MpsSEquip::sensor() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.sensor)
  return sensor_;
}
void MpsSEquip::set_sensor(float value) {
  
  sensor_ = value;
  // @@protoc_insertion_point(field_set:MpsSEquip.sensor)
}

// float comm = 4;
void MpsSEquip::clear_comm() {
  comm_ = 0;
}
float MpsSEquip::comm() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.comm)
  return comm_;
}
void MpsSEquip::set_comm(float value) {
  
  comm_ = value;
  // @@protoc_insertion_point(field_set:MpsSEquip.comm)
}

// float jammer = 5;
void MpsSEquip::clear_jammer() {
  jammer_ = 0;
}
float MpsSEquip::jammer() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.jammer)
  return jammer_;
}
void MpsSEquip::set_jammer(float value) {
  
  jammer_ = value;
  // @@protoc_insertion_point(field_set:MpsSEquip.jammer)
}

// float weapon = 6;
void MpsSEquip::clear_weapon() {
  weapon_ = 0;
}
float MpsSEquip::weapon() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.weapon)
  return weapon_;
}
void MpsSEquip::set_weapon(float value) {
  
  weapon_ = value;
  // @@protoc_insertion_point(field_set:MpsSEquip.weapon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MpsSBLine::_slow_mutable_head() {
  head_ = ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
      GetArenaNoVirtual());
}
::MpsSHeader* MpsSBLine::_slow_release_head() {
  if (head_ == NULL) {
    return NULL;
  } else {
    ::MpsSHeader* temp = new ::MpsSHeader(*head_);
    head_ = NULL;
    return temp;
  }
}
::MpsSHeader* MpsSBLine::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MpsSBLine.head)
  
  ::MpsSHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void MpsSBLine::_slow_set_allocated_head(
    ::google::protobuf::Arena* message_arena, ::MpsSHeader** head) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*head) == NULL) {
      message_arena->Own(*head);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*head)) {
      ::MpsSHeader* new_head = 
            ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
            message_arena);
      new_head->CopyFrom(**head);
      *head = new_head;
    }
}
void MpsSBLine::unsafe_arena_set_allocated_head(
    ::MpsSHeader* head) {
  if (GetArenaNoVirtual() == NULL) {
    delete head_;
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MpsSBLine.head)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpsSBLine::kHeadFieldNumber;
const int MpsSBLine::kLineTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpsSBLine::MpsSBLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpsSBLine)
}
MpsSBLine::MpsSBLine(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MpsSBLine)
}
MpsSBLine::MpsSBLine(const MpsSBLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::MpsSHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  linetype_ = from.linetype_;
  // @@protoc_insertion_point(copy_constructor:MpsSBLine)
}

void MpsSBLine::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&linetype_) -
    reinterpret_cast<char*>(&head_) + sizeof(linetype_));
  _cached_size_ = 0;
}

MpsSBLine::~MpsSBLine() {
  // @@protoc_insertion_point(destructor:MpsSBLine)
  SharedDtor();
}

void MpsSBLine::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete head_;
  }
}

void MpsSBLine::ArenaDtor(void* object) {
  MpsSBLine* _this = reinterpret_cast< MpsSBLine* >(object);
  (void)_this;
}
void MpsSBLine::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MpsSBLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpsSBLine::descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpsSBLine& MpsSBLine::default_instance() {
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MpsSBLine* MpsSBLine::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MpsSBLine>(arena);
}

void MpsSBLine::Clear() {
// @@protoc_insertion_point(message_clear_start:MpsSBLine)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  linetype_ = 0;
}

bool MpsSBLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MpsSBLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MpsSHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpsSBLine.LineType lineType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_linetype(static_cast< ::MpsSBLine_LineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpsSBLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpsSBLine)
  return false;
#undef DO_
}

void MpsSBLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpsSBLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .MpsSBLine.LineType lineType = 2;
  if (this->linetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->linetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:MpsSBLine)
}

::google::protobuf::uint8* MpsSBLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MpsSBLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .MpsSBLine.LineType lineType = 2;
  if (this->linetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->linetype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MpsSBLine)
  return target;
}

size_t MpsSBLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpsSBLine)
  size_t total_size = 0;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .MpsSBLine.LineType lineType = 2;
  if (this->linetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->linetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpsSBLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MpsSBLine)
  GOOGLE_DCHECK_NE(&from, this);
  const MpsSBLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpsSBLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MpsSBLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MpsSBLine)
    MergeFrom(*source);
  }
}

void MpsSBLine::MergeFrom(const MpsSBLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpsSBLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::MpsSHeader::MergeFrom(from.head());
  }
  if (from.linetype() != 0) {
    set_linetype(from.linetype());
  }
}

void MpsSBLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MpsSBLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpsSBLine::CopyFrom(const MpsSBLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpsSBLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpsSBLine::IsInitialized() const {
  return true;
}

void MpsSBLine::Swap(MpsSBLine* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MpsSBLine* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MpsSBLine::UnsafeArenaSwap(MpsSBLine* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MpsSBLine::InternalSwap(MpsSBLine* other) {
  std::swap(head_, other->head_);
  std::swap(linetype_, other->linetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpsSBLine::GetMetadata() const {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MpsSBLine

// .MpsSHeader head = 1;
bool MpsSBLine::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void MpsSBLine::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::MpsSHeader& MpsSBLine::head() const {
  // @@protoc_insertion_point(field_get:MpsSBLine.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
::MpsSHeader* MpsSBLine::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSBLine.head)
  return head_;
}
::MpsSHeader* MpsSBLine::release_head() {
  // @@protoc_insertion_point(field_release:MpsSBLine.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
 void MpsSBLine::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSBLine.head)
}

// .MpsSBLine.LineType lineType = 2;
void MpsSBLine::clear_linetype() {
  linetype_ = 0;
}
::MpsSBLine_LineType MpsSBLine::linetype() const {
  // @@protoc_insertion_point(field_get:MpsSBLine.lineType)
  return static_cast< ::MpsSBLine_LineType >(linetype_);
}
void MpsSBLine::set_linetype(::MpsSBLine_LineType value) {
  
  linetype_ = value;
  // @@protoc_insertion_point(field_set:MpsSBLine.lineType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MpsSORoute::_slow_mutable_head() {
  head_ = ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
      GetArenaNoVirtual());
}
::MpsSHeader* MpsSORoute::_slow_release_head() {
  if (head_ == NULL) {
    return NULL;
  } else {
    ::MpsSHeader* temp = new ::MpsSHeader(*head_);
    head_ = NULL;
    return temp;
  }
}
::MpsSHeader* MpsSORoute::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MpsSORoute.head)
  
  ::MpsSHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void MpsSORoute::_slow_set_allocated_head(
    ::google::protobuf::Arena* message_arena, ::MpsSHeader** head) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*head) == NULL) {
      message_arena->Own(*head);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*head)) {
      ::MpsSHeader* new_head = 
            ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
            message_arena);
      new_head->CopyFrom(**head);
      *head = new_head;
    }
}
void MpsSORoute::unsafe_arena_set_allocated_head(
    ::MpsSHeader* head) {
  if (GetArenaNoVirtual() == NULL) {
    delete head_;
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MpsSORoute.head)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpsSORoute::kHeadFieldNumber;
const int MpsSORoute::kRouteTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpsSORoute::MpsSORoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpsSORoute)
}
MpsSORoute::MpsSORoute(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MpsSORoute)
}
MpsSORoute::MpsSORoute(const MpsSORoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::MpsSHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  routetype_ = from.routetype_;
  // @@protoc_insertion_point(copy_constructor:MpsSORoute)
}

void MpsSORoute::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&routetype_) -
    reinterpret_cast<char*>(&head_) + sizeof(routetype_));
  _cached_size_ = 0;
}

MpsSORoute::~MpsSORoute() {
  // @@protoc_insertion_point(destructor:MpsSORoute)
  SharedDtor();
}

void MpsSORoute::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete head_;
  }
}

void MpsSORoute::ArenaDtor(void* object) {
  MpsSORoute* _this = reinterpret_cast< MpsSORoute* >(object);
  (void)_this;
}
void MpsSORoute::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MpsSORoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpsSORoute::descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpsSORoute& MpsSORoute::default_instance() {
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MpsSORoute* MpsSORoute::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MpsSORoute>(arena);
}

void MpsSORoute::Clear() {
// @@protoc_insertion_point(message_clear_start:MpsSORoute)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  routetype_ = 0;
}

bool MpsSORoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MpsSORoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MpsSHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpsSORoute.RouteType routeType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_routetype(static_cast< ::MpsSORoute_RouteType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpsSORoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpsSORoute)
  return false;
#undef DO_
}

void MpsSORoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpsSORoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .MpsSORoute.RouteType routeType = 2;
  if (this->routetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->routetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:MpsSORoute)
}

::google::protobuf::uint8* MpsSORoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MpsSORoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .MpsSORoute.RouteType routeType = 2;
  if (this->routetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->routetype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MpsSORoute)
  return target;
}

size_t MpsSORoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpsSORoute)
  size_t total_size = 0;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .MpsSORoute.RouteType routeType = 2;
  if (this->routetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->routetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpsSORoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MpsSORoute)
  GOOGLE_DCHECK_NE(&from, this);
  const MpsSORoute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpsSORoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MpsSORoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MpsSORoute)
    MergeFrom(*source);
  }
}

void MpsSORoute::MergeFrom(const MpsSORoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpsSORoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::MpsSHeader::MergeFrom(from.head());
  }
  if (from.routetype() != 0) {
    set_routetype(from.routetype());
  }
}

void MpsSORoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MpsSORoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpsSORoute::CopyFrom(const MpsSORoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpsSORoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpsSORoute::IsInitialized() const {
  return true;
}

void MpsSORoute::Swap(MpsSORoute* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MpsSORoute* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MpsSORoute::UnsafeArenaSwap(MpsSORoute* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MpsSORoute::InternalSwap(MpsSORoute* other) {
  std::swap(head_, other->head_);
  std::swap(routetype_, other->routetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpsSORoute::GetMetadata() const {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MpsSORoute

// .MpsSHeader head = 1;
bool MpsSORoute::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void MpsSORoute::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::MpsSHeader& MpsSORoute::head() const {
  // @@protoc_insertion_point(field_get:MpsSORoute.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
::MpsSHeader* MpsSORoute::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSORoute.head)
  return head_;
}
::MpsSHeader* MpsSORoute::release_head() {
  // @@protoc_insertion_point(field_release:MpsSORoute.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
 void MpsSORoute::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSORoute.head)
}

// .MpsSORoute.RouteType routeType = 2;
void MpsSORoute::clear_routetype() {
  routetype_ = 0;
}
::MpsSORoute_RouteType MpsSORoute::routetype() const {
  // @@protoc_insertion_point(field_get:MpsSORoute.routeType)
  return static_cast< ::MpsSORoute_RouteType >(routetype_);
}
void MpsSORoute::set_routetype(::MpsSORoute_RouteType value) {
  
  routetype_ = value;
  // @@protoc_insertion_point(field_set:MpsSORoute.routeType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MpsSPlane::_slow_mutable_head() {
  head_ = ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
      GetArenaNoVirtual());
}
::MpsSHeader* MpsSPlane::_slow_release_head() {
  if (head_ == NULL) {
    return NULL;
  } else {
    ::MpsSHeader* temp = new ::MpsSHeader(*head_);
    head_ = NULL;
    return temp;
  }
}
::MpsSHeader* MpsSPlane::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MpsSPlane.head)
  
  ::MpsSHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void MpsSPlane::_slow_set_allocated_head(
    ::google::protobuf::Arena* message_arena, ::MpsSHeader** head) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*head) == NULL) {
      message_arena->Own(*head);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*head)) {
      ::MpsSHeader* new_head = 
            ::google::protobuf::Arena::CreateMessage< ::MpsSHeader >(
            message_arena);
      new_head->CopyFrom(**head);
      *head = new_head;
    }
}
void MpsSPlane::unsafe_arena_set_allocated_head(
    ::MpsSHeader* head) {
  if (GetArenaNoVirtual() == NULL) {
    delete head_;
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MpsSPlane.head)
}
void MpsSPlane::_slow_mutable_pos() {
  pos_ = ::google::protobuf::Arena::CreateMessage< ::MpsSPosition >(
      GetArenaNoVirtual());
}
::MpsSPosition* MpsSPlane::_slow_release_pos() {
  if (pos_ == NULL) {
    return NULL;
  } else {
    ::MpsSPosition* temp = new ::MpsSPosition(*pos_);
    pos_ = NULL;
    return temp;
  }
}
::MpsSPosition* MpsSPlane::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MpsSPlane.pos)
  
  ::MpsSPosition* temp = pos_;
  pos_ = NULL;
  return temp;
}
void MpsSPlane::_slow_set_allocated_pos(
    ::google::protobuf::Arena* message_arena, ::MpsSPosition** pos) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*pos) == NULL) {
      message_arena->Own(*pos);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*pos)) {
      ::MpsSPosition* new_pos = 
            ::google::protobuf::Arena::CreateMessage< ::MpsSPosition >(
            message_arena);
      new_pos->CopyFrom(**pos);
      *pos = new_pos;
    }
}
void MpsSPlane::unsafe_arena_set_allocated_pos(
    ::MpsSPosition* pos) {
  if (GetArenaNoVirtual() == NULL) {
    delete pos_;
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MpsSPlane.pos)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MpsSPlane::kHeadFieldNumber;
const int MpsSPlane::kPosFieldNumber;
const int MpsSPlane::kRollFieldNumber;
const int MpsSPlane::kPitchFieldNumber;
const int MpsSPlane::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MpsSPlane::MpsSPlane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MpsSPlane)
}
MpsSPlane::MpsSPlane(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MpsSPlane)
}
MpsSPlane::MpsSPlane(const MpsSPlane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::MpsSHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  if (from.has_pos()) {
    pos_ = new ::MpsSPosition(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&roll_, &from.roll_,
    reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:MpsSPlane)
}

void MpsSPlane::SharedCtor() {
  ::memset(&head_, 0, reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&head_) + sizeof(yaw_));
  _cached_size_ = 0;
}

MpsSPlane::~MpsSPlane() {
  // @@protoc_insertion_point(destructor:MpsSPlane)
  SharedDtor();
}

void MpsSPlane::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete head_;
  }
  if (this != internal_default_instance()) {
    delete pos_;
  }
}

void MpsSPlane::ArenaDtor(void* object) {
  MpsSPlane* _this = reinterpret_cast< MpsSPlane* >(object);
  (void)_this;
}
void MpsSPlane::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MpsSPlane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpsSPlane::descriptor() {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MpsSPlane& MpsSPlane::default_instance() {
  protobuf_mps_5fcoordinate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MpsSPlane* MpsSPlane::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MpsSPlane>(arena);
}

void MpsSPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:MpsSPlane)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  ::memset(&roll_, 0, reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_) + sizeof(yaw_));
}

bool MpsSPlane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MpsSPlane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MpsSHeader head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MpsSPosition pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MpsSPlane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MpsSPlane)
  return false;
#undef DO_
}

void MpsSPlane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MpsSPlane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // .MpsSPosition pos = 2;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // float roll = 3;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  // float pitch = 4;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pitch(), output);
  }

  // float yaw = 5;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->yaw(), output);
  }

  // @@protoc_insertion_point(serialize_end:MpsSPlane)
}

::google::protobuf::uint8* MpsSPlane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MpsSPlane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, deterministic, target);
  }

  // .MpsSPosition pos = 2;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, deterministic, target);
  }

  // float roll = 3;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  // float pitch = 4;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pitch(), target);
  }

  // float yaw = 5;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->yaw(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MpsSPlane)
  return target;
}

size_t MpsSPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MpsSPlane)
  size_t total_size = 0;

  // .MpsSHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // .MpsSPosition pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // float roll = 3;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 4;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpsSPlane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MpsSPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const MpsSPlane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MpsSPlane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MpsSPlane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MpsSPlane)
    MergeFrom(*source);
  }
}

void MpsSPlane::MergeFrom(const MpsSPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MpsSPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::MpsSHeader::MergeFrom(from.head());
  }
  if (from.has_pos()) {
    mutable_pos()->::MpsSPosition::MergeFrom(from.pos());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void MpsSPlane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MpsSPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpsSPlane::CopyFrom(const MpsSPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MpsSPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpsSPlane::IsInitialized() const {
  return true;
}

void MpsSPlane::Swap(MpsSPlane* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MpsSPlane* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MpsSPlane::UnsafeArenaSwap(MpsSPlane* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MpsSPlane::InternalSwap(MpsSPlane* other) {
  std::swap(head_, other->head_);
  std::swap(pos_, other->pos_);
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MpsSPlane::GetMetadata() const {
  protobuf_mps_5fcoordinate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mps_5fcoordinate_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MpsSPlane

// .MpsSHeader head = 1;
bool MpsSPlane::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
void MpsSPlane::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::MpsSHeader& MpsSPlane::head() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
::MpsSHeader* MpsSPlane::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSPlane.head)
  return head_;
}
::MpsSHeader* MpsSPlane::release_head() {
  // @@protoc_insertion_point(field_release:MpsSPlane.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
 void MpsSPlane::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSPlane.head)
}

// .MpsSPosition pos = 2;
bool MpsSPlane::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
void MpsSPlane::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::MpsSPosition& MpsSPlane::pos() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.pos)
  return pos_ != NULL ? *pos_
                         : *::MpsSPosition::internal_default_instance();
}
::MpsSPosition* MpsSPlane::mutable_pos() {
  
  if (pos_ == NULL) {
    _slow_mutable_pos();
  }
  // @@protoc_insertion_point(field_mutable:MpsSPlane.pos)
  return pos_;
}
::MpsSPosition* MpsSPlane::release_pos() {
  // @@protoc_insertion_point(field_release:MpsSPlane.pos)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pos();
  } else {
    ::MpsSPosition* temp = pos_;
    pos_ = NULL;
    return temp;
  }
}
 void MpsSPlane::set_allocated_pos(::MpsSPosition* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos != NULL) {
    _slow_set_allocated_pos(message_arena, &pos);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSPlane.pos)
}

// float roll = 3;
void MpsSPlane::clear_roll() {
  roll_ = 0;
}
float MpsSPlane::roll() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.roll)
  return roll_;
}
void MpsSPlane::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:MpsSPlane.roll)
}

// float pitch = 4;
void MpsSPlane::clear_pitch() {
  pitch_ = 0;
}
float MpsSPlane::pitch() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.pitch)
  return pitch_;
}
void MpsSPlane::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:MpsSPlane.pitch)
}

// float yaw = 5;
void MpsSPlane::clear_yaw() {
  yaw_ = 0;
}
float MpsSPlane::yaw() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.yaw)
  return yaw_;
}
void MpsSPlane::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:MpsSPlane.yaw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
