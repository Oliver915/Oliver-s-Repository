// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mps_coordinate.proto

#ifndef PROTOBUF_mps_5fcoordinate_2eproto__INCLUDED
#define PROTOBUF_mps_5fcoordinate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class MpsSArea;
class MpsSAreaDefaultTypeInternal;
extern MpsSAreaDefaultTypeInternal _MpsSArea_default_instance_;
class MpsSBLine;
class MpsSBLineDefaultTypeInternal;
extern MpsSBLineDefaultTypeInternal _MpsSBLine_default_instance_;
class MpsSEquip;
class MpsSEquipDefaultTypeInternal;
extern MpsSEquipDefaultTypeInternal _MpsSEquip_default_instance_;
class MpsSHeader;
class MpsSHeaderDefaultTypeInternal;
extern MpsSHeaderDefaultTypeInternal _MpsSHeader_default_instance_;
class MpsSORoute;
class MpsSORouteDefaultTypeInternal;
extern MpsSORouteDefaultTypeInternal _MpsSORoute_default_instance_;
class MpsSPlane;
class MpsSPlaneDefaultTypeInternal;
extern MpsSPlaneDefaultTypeInternal _MpsSPlane_default_instance_;
class MpsSPosition;
class MpsSPositionDefaultTypeInternal;
extern MpsSPositionDefaultTypeInternal _MpsSPosition_default_instance_;
class MpsSWeather;
class MpsSWeatherDefaultTypeInternal;
extern MpsSWeatherDefaultTypeInternal _MpsSWeather_default_instance_;

namespace protobuf_mps_5fcoordinate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mps_5fcoordinate_2eproto

enum MpsSWeather_WType {
  MpsSWeather_WType_WIND_SHEAR = 0,
  MpsSWeather_WType_THUNDER_STORM = 1,
  MpsSWeather_WType_RAIN = 2,
  MpsSWeather_WType_SNOW = 3,
  MpsSWeather_WType_HAIL_STONE = 4,
  MpsSWeather_WType_SAND_STORM = 5,
  MpsSWeather_WType_FOG = 6,
  MpsSWeather_WType_CLOUD = 7,
  MpsSWeather_WType_MpsSWeather_WType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpsSWeather_WType_MpsSWeather_WType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpsSWeather_WType_IsValid(int value);
const MpsSWeather_WType MpsSWeather_WType_WType_MIN = MpsSWeather_WType_WIND_SHEAR;
const MpsSWeather_WType MpsSWeather_WType_WType_MAX = MpsSWeather_WType_CLOUD;
const int MpsSWeather_WType_WType_ARRAYSIZE = MpsSWeather_WType_WType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpsSWeather_WType_descriptor();
inline const ::std::string& MpsSWeather_WType_Name(MpsSWeather_WType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpsSWeather_WType_descriptor(), value);
}
inline bool MpsSWeather_WType_Parse(
    const ::std::string& name, MpsSWeather_WType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpsSWeather_WType>(
    MpsSWeather_WType_descriptor(), name, value);
}
enum MpsSWeather_WClass {
  MpsSWeather_WClass_NORMAL = 0,
  MpsSWeather_WClass_MINOR = 1,
  MpsSWeather_WClass_MAJOR = 2,
  MpsSWeather_WClass_CRITICAL = 3,
  MpsSWeather_WClass_MpsSWeather_WClass_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpsSWeather_WClass_MpsSWeather_WClass_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpsSWeather_WClass_IsValid(int value);
const MpsSWeather_WClass MpsSWeather_WClass_WClass_MIN = MpsSWeather_WClass_NORMAL;
const MpsSWeather_WClass MpsSWeather_WClass_WClass_MAX = MpsSWeather_WClass_CRITICAL;
const int MpsSWeather_WClass_WClass_ARRAYSIZE = MpsSWeather_WClass_WClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpsSWeather_WClass_descriptor();
inline const ::std::string& MpsSWeather_WClass_Name(MpsSWeather_WClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpsSWeather_WClass_descriptor(), value);
}
inline bool MpsSWeather_WClass_Parse(
    const ::std::string& name, MpsSWeather_WClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpsSWeather_WClass>(
    MpsSWeather_WClass_descriptor(), name, value);
}
enum MpsSArea_AreaType {
  MpsSArea_AreaType_TASK_AREA = 0,
  MpsSArea_AreaType_FORCE_AREA = 1,
  MpsSArea_AreaType_NOFLY_ZONE = 2,
  MpsSArea_AreaType_CONTROL_AREA = 3,
  MpsSArea_AreaType_RESTRICTED_AREA = 4,
  MpsSArea_AreaType_IDENTIFICATION_ZONE = 5,
  MpsSArea_AreaType_LIABILITY_AREA = 6,
  MpsSArea_AreaType_COMBAT_ZONE = 7,
  MpsSArea_AreaType_DEFENSE_ZONE = 8,
  MpsSArea_AreaType_WARNING_AREA = 9,
  MpsSArea_AreaType_MpsSArea_AreaType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpsSArea_AreaType_MpsSArea_AreaType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpsSArea_AreaType_IsValid(int value);
const MpsSArea_AreaType MpsSArea_AreaType_AreaType_MIN = MpsSArea_AreaType_TASK_AREA;
const MpsSArea_AreaType MpsSArea_AreaType_AreaType_MAX = MpsSArea_AreaType_WARNING_AREA;
const int MpsSArea_AreaType_AreaType_ARRAYSIZE = MpsSArea_AreaType_AreaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpsSArea_AreaType_descriptor();
inline const ::std::string& MpsSArea_AreaType_Name(MpsSArea_AreaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpsSArea_AreaType_descriptor(), value);
}
inline bool MpsSArea_AreaType_Parse(
    const ::std::string& name, MpsSArea_AreaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpsSArea_AreaType>(
    MpsSArea_AreaType_descriptor(), name, value);
}
enum MpsSBLine_LineType {
  MpsSBLine_LineType_AIR_BOUND = 0,
  MpsSBLine_LineType_FRONT_LINE = 1,
  MpsSBLine_LineType_MpsSBLine_LineType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpsSBLine_LineType_MpsSBLine_LineType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpsSBLine_LineType_IsValid(int value);
const MpsSBLine_LineType MpsSBLine_LineType_LineType_MIN = MpsSBLine_LineType_AIR_BOUND;
const MpsSBLine_LineType MpsSBLine_LineType_LineType_MAX = MpsSBLine_LineType_FRONT_LINE;
const int MpsSBLine_LineType_LineType_ARRAYSIZE = MpsSBLine_LineType_LineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpsSBLine_LineType_descriptor();
inline const ::std::string& MpsSBLine_LineType_Name(MpsSBLine_LineType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpsSBLine_LineType_descriptor(), value);
}
inline bool MpsSBLine_LineType_Parse(
    const ::std::string& name, MpsSBLine_LineType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpsSBLine_LineType>(
    MpsSBLine_LineType_descriptor(), name, value);
}
enum MpsSORoute_RouteType {
  MpsSORoute_RouteType_FRIEND_LINE = 0,
  MpsSORoute_RouteType_CIVIL_LINE = 1,
  MpsSORoute_RouteType_AIR_CORRIDOR = 2,
  MpsSORoute_RouteType_MpsSORoute_RouteType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MpsSORoute_RouteType_MpsSORoute_RouteType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MpsSORoute_RouteType_IsValid(int value);
const MpsSORoute_RouteType MpsSORoute_RouteType_RouteType_MIN = MpsSORoute_RouteType_FRIEND_LINE;
const MpsSORoute_RouteType MpsSORoute_RouteType_RouteType_MAX = MpsSORoute_RouteType_AIR_CORRIDOR;
const int MpsSORoute_RouteType_RouteType_ARRAYSIZE = MpsSORoute_RouteType_RouteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MpsSORoute_RouteType_descriptor();
inline const ::std::string& MpsSORoute_RouteType_Name(MpsSORoute_RouteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MpsSORoute_RouteType_descriptor(), value);
}
inline bool MpsSORoute_RouteType_Parse(
    const ::std::string& name, MpsSORoute_RouteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MpsSORoute_RouteType>(
    MpsSORoute_RouteType_descriptor(), name, value);
}
// ===================================================================

class MpsSHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MpsSHeader) */ {
 public:
  MpsSHeader();
  virtual ~MpsSHeader();

  MpsSHeader(const MpsSHeader& from);

  inline MpsSHeader& operator=(const MpsSHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpsSHeader& default_instance();

  static inline const MpsSHeader* internal_default_instance() {
    return reinterpret_cast<const MpsSHeader*>(
               &_MpsSHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MpsSHeader* other);
  void Swap(MpsSHeader* other);

  // implements Message ----------------------------------------------

  inline MpsSHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  MpsSHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpsSHeader& from);
  void MergeFrom(const MpsSHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpsSHeader* other);
  protected:
  explicit MpsSHeader(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MpsSHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double time_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct protobuf_mps_5fcoordinate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpsSPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MpsSPosition) */ {
 public:
  MpsSPosition();
  virtual ~MpsSPosition();

  MpsSPosition(const MpsSPosition& from);

  inline MpsSPosition& operator=(const MpsSPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpsSPosition& default_instance();

  static inline const MpsSPosition* internal_default_instance() {
    return reinterpret_cast<const MpsSPosition*>(
               &_MpsSPosition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(MpsSPosition* other);
  void Swap(MpsSPosition* other);

  // implements Message ----------------------------------------------

  inline MpsSPosition* New() const PROTOBUF_FINAL { return New(NULL); }

  MpsSPosition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpsSPosition& from);
  void MergeFrom(const MpsSPosition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpsSPosition* other);
  protected:
  explicit MpsSPosition(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float lng = 3;
  void clear_lng();
  static const int kLngFieldNumber = 3;
  float lng() const;
  void set_lng(float value);

  // float lat = 4;
  void clear_lat();
  static const int kLatFieldNumber = 4;
  float lat() const;
  void set_lat(float value);

  // float h = 5;
  void clear_h();
  static const int kHFieldNumber = 5;
  float h() const;
  void set_h(float value);

  // @@protoc_insertion_point(class_scope:MpsSPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float lng_;
  float lat_;
  float h_;
  mutable int _cached_size_;
  friend struct protobuf_mps_5fcoordinate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpsSWeather : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MpsSWeather) */ {
 public:
  MpsSWeather();
  virtual ~MpsSWeather();

  MpsSWeather(const MpsSWeather& from);

  inline MpsSWeather& operator=(const MpsSWeather& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpsSWeather& default_instance();

  static inline const MpsSWeather* internal_default_instance() {
    return reinterpret_cast<const MpsSWeather*>(
               &_MpsSWeather_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(MpsSWeather* other);
  void Swap(MpsSWeather* other);

  // implements Message ----------------------------------------------

  inline MpsSWeather* New() const PROTOBUF_FINAL { return New(NULL); }

  MpsSWeather* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpsSWeather& from);
  void MergeFrom(const MpsSWeather& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpsSWeather* other);
  protected:
  explicit MpsSWeather(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpsSWeather_WType WType;
  static const WType WIND_SHEAR =
    MpsSWeather_WType_WIND_SHEAR;
  static const WType THUNDER_STORM =
    MpsSWeather_WType_THUNDER_STORM;
  static const WType RAIN =
    MpsSWeather_WType_RAIN;
  static const WType SNOW =
    MpsSWeather_WType_SNOW;
  static const WType HAIL_STONE =
    MpsSWeather_WType_HAIL_STONE;
  static const WType SAND_STORM =
    MpsSWeather_WType_SAND_STORM;
  static const WType FOG =
    MpsSWeather_WType_FOG;
  static const WType CLOUD =
    MpsSWeather_WType_CLOUD;
  static inline bool WType_IsValid(int value) {
    return MpsSWeather_WType_IsValid(value);
  }
  static const WType WType_MIN =
    MpsSWeather_WType_WType_MIN;
  static const WType WType_MAX =
    MpsSWeather_WType_WType_MAX;
  static const int WType_ARRAYSIZE =
    MpsSWeather_WType_WType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WType_descriptor() {
    return MpsSWeather_WType_descriptor();
  }
  static inline const ::std::string& WType_Name(WType value) {
    return MpsSWeather_WType_Name(value);
  }
  static inline bool WType_Parse(const ::std::string& name,
      WType* value) {
    return MpsSWeather_WType_Parse(name, value);
  }

  typedef MpsSWeather_WClass WClass;
  static const WClass NORMAL =
    MpsSWeather_WClass_NORMAL;
  static const WClass MINOR =
    MpsSWeather_WClass_MINOR;
  static const WClass MAJOR =
    MpsSWeather_WClass_MAJOR;
  static const WClass CRITICAL =
    MpsSWeather_WClass_CRITICAL;
  static inline bool WClass_IsValid(int value) {
    return MpsSWeather_WClass_IsValid(value);
  }
  static const WClass WClass_MIN =
    MpsSWeather_WClass_WClass_MIN;
  static const WClass WClass_MAX =
    MpsSWeather_WClass_WClass_MAX;
  static const int WClass_ARRAYSIZE =
    MpsSWeather_WClass_WClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WClass_descriptor() {
    return MpsSWeather_WClass_descriptor();
  }
  static inline const ::std::string& WClass_Name(WClass value) {
    return MpsSWeather_WClass_Name(value);
  }
  static inline bool WClass_Parse(const ::std::string& name,
      WClass* value) {
    return MpsSWeather_WClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .MpsSHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  void _slow_mutable_head();
  void _slow_set_allocated_head(
      ::google::protobuf::Arena* message_arena, ::MpsSHeader** head);
  ::MpsSHeader* _slow_release_head();
  public:
  const ::MpsSHeader& head() const;
  ::MpsSHeader* mutable_head();
  ::MpsSHeader* release_head();
  void set_allocated_head(::MpsSHeader* head);
  ::MpsSHeader* unsafe_arena_release_head();
  void unsafe_arena_set_allocated_head(
      ::MpsSHeader* head);

  // .MpsSWeather.WType wType = 2;
  void clear_wtype();
  static const int kWTypeFieldNumber = 2;
  ::MpsSWeather_WType wtype() const;
  void set_wtype(::MpsSWeather_WType value);

  // .MpsSWeather.WClass wClass = 3;
  void clear_wclass();
  static const int kWClassFieldNumber = 3;
  ::MpsSWeather_WClass wclass() const;
  void set_wclass(::MpsSWeather_WClass value);

  // @@protoc_insertion_point(class_scope:MpsSWeather)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MpsSHeader* head_;
  int wtype_;
  int wclass_;
  mutable int _cached_size_;
  friend struct protobuf_mps_5fcoordinate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpsSArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MpsSArea) */ {
 public:
  MpsSArea();
  virtual ~MpsSArea();

  MpsSArea(const MpsSArea& from);

  inline MpsSArea& operator=(const MpsSArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpsSArea& default_instance();

  static inline const MpsSArea* internal_default_instance() {
    return reinterpret_cast<const MpsSArea*>(
               &_MpsSArea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(MpsSArea* other);
  void Swap(MpsSArea* other);

  // implements Message ----------------------------------------------

  inline MpsSArea* New() const PROTOBUF_FINAL { return New(NULL); }

  MpsSArea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpsSArea& from);
  void MergeFrom(const MpsSArea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpsSArea* other);
  protected:
  explicit MpsSArea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpsSArea_AreaType AreaType;
  static const AreaType TASK_AREA =
    MpsSArea_AreaType_TASK_AREA;
  static const AreaType FORCE_AREA =
    MpsSArea_AreaType_FORCE_AREA;
  static const AreaType NOFLY_ZONE =
    MpsSArea_AreaType_NOFLY_ZONE;
  static const AreaType CONTROL_AREA =
    MpsSArea_AreaType_CONTROL_AREA;
  static const AreaType RESTRICTED_AREA =
    MpsSArea_AreaType_RESTRICTED_AREA;
  static const AreaType IDENTIFICATION_ZONE =
    MpsSArea_AreaType_IDENTIFICATION_ZONE;
  static const AreaType LIABILITY_AREA =
    MpsSArea_AreaType_LIABILITY_AREA;
  static const AreaType COMBAT_ZONE =
    MpsSArea_AreaType_COMBAT_ZONE;
  static const AreaType DEFENSE_ZONE =
    MpsSArea_AreaType_DEFENSE_ZONE;
  static const AreaType WARNING_AREA =
    MpsSArea_AreaType_WARNING_AREA;
  static inline bool AreaType_IsValid(int value) {
    return MpsSArea_AreaType_IsValid(value);
  }
  static const AreaType AreaType_MIN =
    MpsSArea_AreaType_AreaType_MIN;
  static const AreaType AreaType_MAX =
    MpsSArea_AreaType_AreaType_MAX;
  static const int AreaType_ARRAYSIZE =
    MpsSArea_AreaType_AreaType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AreaType_descriptor() {
    return MpsSArea_AreaType_descriptor();
  }
  static inline const ::std::string& AreaType_Name(AreaType value) {
    return MpsSArea_AreaType_Name(value);
  }
  static inline bool AreaType_Parse(const ::std::string& name,
      AreaType* value) {
    return MpsSArea_AreaType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .MpsSHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  void _slow_mutable_head();
  void _slow_set_allocated_head(
      ::google::protobuf::Arena* message_arena, ::MpsSHeader** head);
  ::MpsSHeader* _slow_release_head();
  public:
  const ::MpsSHeader& head() const;
  ::MpsSHeader* mutable_head();
  ::MpsSHeader* release_head();
  void set_allocated_head(::MpsSHeader* head);
  ::MpsSHeader* unsafe_arena_release_head();
  void unsafe_arena_set_allocated_head(
      ::MpsSHeader* head);

  // .MpsSArea.AreaType areaType = 2;
  void clear_areatype();
  static const int kAreaTypeFieldNumber = 2;
  ::MpsSArea_AreaType areatype() const;
  void set_areatype(::MpsSArea_AreaType value);

  // @@protoc_insertion_point(class_scope:MpsSArea)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MpsSHeader* head_;
  int areatype_;
  mutable int _cached_size_;
  friend struct protobuf_mps_5fcoordinate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpsSEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MpsSEquip) */ {
 public:
  MpsSEquip();
  virtual ~MpsSEquip();

  MpsSEquip(const MpsSEquip& from);

  inline MpsSEquip& operator=(const MpsSEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpsSEquip& default_instance();

  static inline const MpsSEquip* internal_default_instance() {
    return reinterpret_cast<const MpsSEquip*>(
               &_MpsSEquip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(MpsSEquip* other);
  void Swap(MpsSEquip* other);

  // implements Message ----------------------------------------------

  inline MpsSEquip* New() const PROTOBUF_FINAL { return New(NULL); }

  MpsSEquip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpsSEquip& from);
  void MergeFrom(const MpsSEquip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpsSEquip* other);
  protected:
  explicit MpsSEquip(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MpsSHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  void _slow_mutable_head();
  void _slow_set_allocated_head(
      ::google::protobuf::Arena* message_arena, ::MpsSHeader** head);
  ::MpsSHeader* _slow_release_head();
  public:
  const ::MpsSHeader& head() const;
  ::MpsSHeader* mutable_head();
  ::MpsSHeader* release_head();
  void set_allocated_head(::MpsSHeader* head);
  ::MpsSHeader* unsafe_arena_release_head();
  void unsafe_arena_set_allocated_head(
      ::MpsSHeader* head);

  // .MpsSPosition pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  private:
  void _slow_mutable_pos();
  void _slow_set_allocated_pos(
      ::google::protobuf::Arena* message_arena, ::MpsSPosition** pos);
  ::MpsSPosition* _slow_release_pos();
  public:
  const ::MpsSPosition& pos() const;
  ::MpsSPosition* mutable_pos();
  ::MpsSPosition* release_pos();
  void set_allocated_pos(::MpsSPosition* pos);
  ::MpsSPosition* unsafe_arena_release_pos();
  void unsafe_arena_set_allocated_pos(
      ::MpsSPosition* pos);

  // float sensor = 3;
  void clear_sensor();
  static const int kSensorFieldNumber = 3;
  float sensor() const;
  void set_sensor(float value);

  // float comm = 4;
  void clear_comm();
  static const int kCommFieldNumber = 4;
  float comm() const;
  void set_comm(float value);

  // float jammer = 5;
  void clear_jammer();
  static const int kJammerFieldNumber = 5;
  float jammer() const;
  void set_jammer(float value);

  // float weapon = 6;
  void clear_weapon();
  static const int kWeaponFieldNumber = 6;
  float weapon() const;
  void set_weapon(float value);

  // @@protoc_insertion_point(class_scope:MpsSEquip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MpsSHeader* head_;
  ::MpsSPosition* pos_;
  float sensor_;
  float comm_;
  float jammer_;
  float weapon_;
  mutable int _cached_size_;
  friend struct protobuf_mps_5fcoordinate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpsSBLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MpsSBLine) */ {
 public:
  MpsSBLine();
  virtual ~MpsSBLine();

  MpsSBLine(const MpsSBLine& from);

  inline MpsSBLine& operator=(const MpsSBLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpsSBLine& default_instance();

  static inline const MpsSBLine* internal_default_instance() {
    return reinterpret_cast<const MpsSBLine*>(
               &_MpsSBLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(MpsSBLine* other);
  void Swap(MpsSBLine* other);

  // implements Message ----------------------------------------------

  inline MpsSBLine* New() const PROTOBUF_FINAL { return New(NULL); }

  MpsSBLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpsSBLine& from);
  void MergeFrom(const MpsSBLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpsSBLine* other);
  protected:
  explicit MpsSBLine(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpsSBLine_LineType LineType;
  static const LineType AIR_BOUND =
    MpsSBLine_LineType_AIR_BOUND;
  static const LineType FRONT_LINE =
    MpsSBLine_LineType_FRONT_LINE;
  static inline bool LineType_IsValid(int value) {
    return MpsSBLine_LineType_IsValid(value);
  }
  static const LineType LineType_MIN =
    MpsSBLine_LineType_LineType_MIN;
  static const LineType LineType_MAX =
    MpsSBLine_LineType_LineType_MAX;
  static const int LineType_ARRAYSIZE =
    MpsSBLine_LineType_LineType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LineType_descriptor() {
    return MpsSBLine_LineType_descriptor();
  }
  static inline const ::std::string& LineType_Name(LineType value) {
    return MpsSBLine_LineType_Name(value);
  }
  static inline bool LineType_Parse(const ::std::string& name,
      LineType* value) {
    return MpsSBLine_LineType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .MpsSHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  void _slow_mutable_head();
  void _slow_set_allocated_head(
      ::google::protobuf::Arena* message_arena, ::MpsSHeader** head);
  ::MpsSHeader* _slow_release_head();
  public:
  const ::MpsSHeader& head() const;
  ::MpsSHeader* mutable_head();
  ::MpsSHeader* release_head();
  void set_allocated_head(::MpsSHeader* head);
  ::MpsSHeader* unsafe_arena_release_head();
  void unsafe_arena_set_allocated_head(
      ::MpsSHeader* head);

  // .MpsSBLine.LineType lineType = 2;
  void clear_linetype();
  static const int kLineTypeFieldNumber = 2;
  ::MpsSBLine_LineType linetype() const;
  void set_linetype(::MpsSBLine_LineType value);

  // @@protoc_insertion_point(class_scope:MpsSBLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MpsSHeader* head_;
  int linetype_;
  mutable int _cached_size_;
  friend struct protobuf_mps_5fcoordinate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpsSORoute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MpsSORoute) */ {
 public:
  MpsSORoute();
  virtual ~MpsSORoute();

  MpsSORoute(const MpsSORoute& from);

  inline MpsSORoute& operator=(const MpsSORoute& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpsSORoute& default_instance();

  static inline const MpsSORoute* internal_default_instance() {
    return reinterpret_cast<const MpsSORoute*>(
               &_MpsSORoute_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(MpsSORoute* other);
  void Swap(MpsSORoute* other);

  // implements Message ----------------------------------------------

  inline MpsSORoute* New() const PROTOBUF_FINAL { return New(NULL); }

  MpsSORoute* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpsSORoute& from);
  void MergeFrom(const MpsSORoute& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpsSORoute* other);
  protected:
  explicit MpsSORoute(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MpsSORoute_RouteType RouteType;
  static const RouteType FRIEND_LINE =
    MpsSORoute_RouteType_FRIEND_LINE;
  static const RouteType CIVIL_LINE =
    MpsSORoute_RouteType_CIVIL_LINE;
  static const RouteType AIR_CORRIDOR =
    MpsSORoute_RouteType_AIR_CORRIDOR;
  static inline bool RouteType_IsValid(int value) {
    return MpsSORoute_RouteType_IsValid(value);
  }
  static const RouteType RouteType_MIN =
    MpsSORoute_RouteType_RouteType_MIN;
  static const RouteType RouteType_MAX =
    MpsSORoute_RouteType_RouteType_MAX;
  static const int RouteType_ARRAYSIZE =
    MpsSORoute_RouteType_RouteType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RouteType_descriptor() {
    return MpsSORoute_RouteType_descriptor();
  }
  static inline const ::std::string& RouteType_Name(RouteType value) {
    return MpsSORoute_RouteType_Name(value);
  }
  static inline bool RouteType_Parse(const ::std::string& name,
      RouteType* value) {
    return MpsSORoute_RouteType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .MpsSHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  void _slow_mutable_head();
  void _slow_set_allocated_head(
      ::google::protobuf::Arena* message_arena, ::MpsSHeader** head);
  ::MpsSHeader* _slow_release_head();
  public:
  const ::MpsSHeader& head() const;
  ::MpsSHeader* mutable_head();
  ::MpsSHeader* release_head();
  void set_allocated_head(::MpsSHeader* head);
  ::MpsSHeader* unsafe_arena_release_head();
  void unsafe_arena_set_allocated_head(
      ::MpsSHeader* head);

  // .MpsSORoute.RouteType routeType = 2;
  void clear_routetype();
  static const int kRouteTypeFieldNumber = 2;
  ::MpsSORoute_RouteType routetype() const;
  void set_routetype(::MpsSORoute_RouteType value);

  // @@protoc_insertion_point(class_scope:MpsSORoute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MpsSHeader* head_;
  int routetype_;
  mutable int _cached_size_;
  friend struct protobuf_mps_5fcoordinate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MpsSPlane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MpsSPlane) */ {
 public:
  MpsSPlane();
  virtual ~MpsSPlane();

  MpsSPlane(const MpsSPlane& from);

  inline MpsSPlane& operator=(const MpsSPlane& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MpsSPlane& default_instance();

  static inline const MpsSPlane* internal_default_instance() {
    return reinterpret_cast<const MpsSPlane*>(
               &_MpsSPlane_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(MpsSPlane* other);
  void Swap(MpsSPlane* other);

  // implements Message ----------------------------------------------

  inline MpsSPlane* New() const PROTOBUF_FINAL { return New(NULL); }

  MpsSPlane* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MpsSPlane& from);
  void MergeFrom(const MpsSPlane& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MpsSPlane* other);
  protected:
  explicit MpsSPlane(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MpsSHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  private:
  void _slow_mutable_head();
  void _slow_set_allocated_head(
      ::google::protobuf::Arena* message_arena, ::MpsSHeader** head);
  ::MpsSHeader* _slow_release_head();
  public:
  const ::MpsSHeader& head() const;
  ::MpsSHeader* mutable_head();
  ::MpsSHeader* release_head();
  void set_allocated_head(::MpsSHeader* head);
  ::MpsSHeader* unsafe_arena_release_head();
  void unsafe_arena_set_allocated_head(
      ::MpsSHeader* head);

  // .MpsSPosition pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  private:
  void _slow_mutable_pos();
  void _slow_set_allocated_pos(
      ::google::protobuf::Arena* message_arena, ::MpsSPosition** pos);
  ::MpsSPosition* _slow_release_pos();
  public:
  const ::MpsSPosition& pos() const;
  ::MpsSPosition* mutable_pos();
  ::MpsSPosition* release_pos();
  void set_allocated_pos(::MpsSPosition* pos);
  ::MpsSPosition* unsafe_arena_release_pos();
  void unsafe_arena_set_allocated_pos(
      ::MpsSPosition* pos);

  // float roll = 3;
  void clear_roll();
  static const int kRollFieldNumber = 3;
  float roll() const;
  void set_roll(float value);

  // float pitch = 4;
  void clear_pitch();
  static const int kPitchFieldNumber = 4;
  float pitch() const;
  void set_pitch(float value);

  // float yaw = 5;
  void clear_yaw();
  static const int kYawFieldNumber = 5;
  float yaw() const;
  void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:MpsSPlane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MpsSHeader* head_;
  ::MpsSPosition* pos_;
  float roll_;
  float pitch_;
  float yaw_;
  mutable int _cached_size_;
  friend struct protobuf_mps_5fcoordinate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MpsSHeader

// double time = 1;
inline void MpsSHeader::clear_time() {
  time_ = 0;
}
inline double MpsSHeader::time() const {
  // @@protoc_insertion_point(field_get:MpsSHeader.time)
  return time_;
}
inline void MpsSHeader::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:MpsSHeader.time)
}

// uint32 id = 2;
inline void MpsSHeader::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 MpsSHeader::id() const {
  // @@protoc_insertion_point(field_get:MpsSHeader.id)
  return id_;
}
inline void MpsSHeader::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:MpsSHeader.id)
}

// -------------------------------------------------------------------

// MpsSPosition

// float lng = 3;
inline void MpsSPosition::clear_lng() {
  lng_ = 0;
}
inline float MpsSPosition::lng() const {
  // @@protoc_insertion_point(field_get:MpsSPosition.lng)
  return lng_;
}
inline void MpsSPosition::set_lng(float value) {
  
  lng_ = value;
  // @@protoc_insertion_point(field_set:MpsSPosition.lng)
}

// float lat = 4;
inline void MpsSPosition::clear_lat() {
  lat_ = 0;
}
inline float MpsSPosition::lat() const {
  // @@protoc_insertion_point(field_get:MpsSPosition.lat)
  return lat_;
}
inline void MpsSPosition::set_lat(float value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:MpsSPosition.lat)
}

// float h = 5;
inline void MpsSPosition::clear_h() {
  h_ = 0;
}
inline float MpsSPosition::h() const {
  // @@protoc_insertion_point(field_get:MpsSPosition.h)
  return h_;
}
inline void MpsSPosition::set_h(float value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:MpsSPosition.h)
}

// -------------------------------------------------------------------

// MpsSWeather

// .MpsSHeader head = 1;
inline bool MpsSWeather::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void MpsSWeather::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::MpsSHeader& MpsSWeather::head() const {
  // @@protoc_insertion_point(field_get:MpsSWeather.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
inline ::MpsSHeader* MpsSWeather::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSWeather.head)
  return head_;
}
inline ::MpsSHeader* MpsSWeather::release_head() {
  // @@protoc_insertion_point(field_release:MpsSWeather.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
inline  void MpsSWeather::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSWeather.head)
}

// .MpsSWeather.WType wType = 2;
inline void MpsSWeather::clear_wtype() {
  wtype_ = 0;
}
inline ::MpsSWeather_WType MpsSWeather::wtype() const {
  // @@protoc_insertion_point(field_get:MpsSWeather.wType)
  return static_cast< ::MpsSWeather_WType >(wtype_);
}
inline void MpsSWeather::set_wtype(::MpsSWeather_WType value) {
  
  wtype_ = value;
  // @@protoc_insertion_point(field_set:MpsSWeather.wType)
}

// .MpsSWeather.WClass wClass = 3;
inline void MpsSWeather::clear_wclass() {
  wclass_ = 0;
}
inline ::MpsSWeather_WClass MpsSWeather::wclass() const {
  // @@protoc_insertion_point(field_get:MpsSWeather.wClass)
  return static_cast< ::MpsSWeather_WClass >(wclass_);
}
inline void MpsSWeather::set_wclass(::MpsSWeather_WClass value) {
  
  wclass_ = value;
  // @@protoc_insertion_point(field_set:MpsSWeather.wClass)
}

// -------------------------------------------------------------------

// MpsSArea

// .MpsSHeader head = 1;
inline bool MpsSArea::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void MpsSArea::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::MpsSHeader& MpsSArea::head() const {
  // @@protoc_insertion_point(field_get:MpsSArea.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
inline ::MpsSHeader* MpsSArea::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSArea.head)
  return head_;
}
inline ::MpsSHeader* MpsSArea::release_head() {
  // @@protoc_insertion_point(field_release:MpsSArea.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
inline  void MpsSArea::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSArea.head)
}

// .MpsSArea.AreaType areaType = 2;
inline void MpsSArea::clear_areatype() {
  areatype_ = 0;
}
inline ::MpsSArea_AreaType MpsSArea::areatype() const {
  // @@protoc_insertion_point(field_get:MpsSArea.areaType)
  return static_cast< ::MpsSArea_AreaType >(areatype_);
}
inline void MpsSArea::set_areatype(::MpsSArea_AreaType value) {
  
  areatype_ = value;
  // @@protoc_insertion_point(field_set:MpsSArea.areaType)
}

// -------------------------------------------------------------------

// MpsSEquip

// .MpsSHeader head = 1;
inline bool MpsSEquip::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void MpsSEquip::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::MpsSHeader& MpsSEquip::head() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
inline ::MpsSHeader* MpsSEquip::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSEquip.head)
  return head_;
}
inline ::MpsSHeader* MpsSEquip::release_head() {
  // @@protoc_insertion_point(field_release:MpsSEquip.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
inline  void MpsSEquip::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSEquip.head)
}

// .MpsSPosition pos = 2;
inline bool MpsSEquip::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void MpsSEquip::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::MpsSPosition& MpsSEquip::pos() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.pos)
  return pos_ != NULL ? *pos_
                         : *::MpsSPosition::internal_default_instance();
}
inline ::MpsSPosition* MpsSEquip::mutable_pos() {
  
  if (pos_ == NULL) {
    _slow_mutable_pos();
  }
  // @@protoc_insertion_point(field_mutable:MpsSEquip.pos)
  return pos_;
}
inline ::MpsSPosition* MpsSEquip::release_pos() {
  // @@protoc_insertion_point(field_release:MpsSEquip.pos)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pos();
  } else {
    ::MpsSPosition* temp = pos_;
    pos_ = NULL;
    return temp;
  }
}
inline  void MpsSEquip::set_allocated_pos(::MpsSPosition* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos != NULL) {
    _slow_set_allocated_pos(message_arena, &pos);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSEquip.pos)
}

// float sensor = 3;
inline void MpsSEquip::clear_sensor() {
  sensor_ = 0;
}
inline float MpsSEquip::sensor() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.sensor)
  return sensor_;
}
inline void MpsSEquip::set_sensor(float value) {
  
  sensor_ = value;
  // @@protoc_insertion_point(field_set:MpsSEquip.sensor)
}

// float comm = 4;
inline void MpsSEquip::clear_comm() {
  comm_ = 0;
}
inline float MpsSEquip::comm() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.comm)
  return comm_;
}
inline void MpsSEquip::set_comm(float value) {
  
  comm_ = value;
  // @@protoc_insertion_point(field_set:MpsSEquip.comm)
}

// float jammer = 5;
inline void MpsSEquip::clear_jammer() {
  jammer_ = 0;
}
inline float MpsSEquip::jammer() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.jammer)
  return jammer_;
}
inline void MpsSEquip::set_jammer(float value) {
  
  jammer_ = value;
  // @@protoc_insertion_point(field_set:MpsSEquip.jammer)
}

// float weapon = 6;
inline void MpsSEquip::clear_weapon() {
  weapon_ = 0;
}
inline float MpsSEquip::weapon() const {
  // @@protoc_insertion_point(field_get:MpsSEquip.weapon)
  return weapon_;
}
inline void MpsSEquip::set_weapon(float value) {
  
  weapon_ = value;
  // @@protoc_insertion_point(field_set:MpsSEquip.weapon)
}

// -------------------------------------------------------------------

// MpsSBLine

// .MpsSHeader head = 1;
inline bool MpsSBLine::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void MpsSBLine::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::MpsSHeader& MpsSBLine::head() const {
  // @@protoc_insertion_point(field_get:MpsSBLine.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
inline ::MpsSHeader* MpsSBLine::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSBLine.head)
  return head_;
}
inline ::MpsSHeader* MpsSBLine::release_head() {
  // @@protoc_insertion_point(field_release:MpsSBLine.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
inline  void MpsSBLine::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSBLine.head)
}

// .MpsSBLine.LineType lineType = 2;
inline void MpsSBLine::clear_linetype() {
  linetype_ = 0;
}
inline ::MpsSBLine_LineType MpsSBLine::linetype() const {
  // @@protoc_insertion_point(field_get:MpsSBLine.lineType)
  return static_cast< ::MpsSBLine_LineType >(linetype_);
}
inline void MpsSBLine::set_linetype(::MpsSBLine_LineType value) {
  
  linetype_ = value;
  // @@protoc_insertion_point(field_set:MpsSBLine.lineType)
}

// -------------------------------------------------------------------

// MpsSORoute

// .MpsSHeader head = 1;
inline bool MpsSORoute::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void MpsSORoute::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::MpsSHeader& MpsSORoute::head() const {
  // @@protoc_insertion_point(field_get:MpsSORoute.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
inline ::MpsSHeader* MpsSORoute::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSORoute.head)
  return head_;
}
inline ::MpsSHeader* MpsSORoute::release_head() {
  // @@protoc_insertion_point(field_release:MpsSORoute.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
inline  void MpsSORoute::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSORoute.head)
}

// .MpsSORoute.RouteType routeType = 2;
inline void MpsSORoute::clear_routetype() {
  routetype_ = 0;
}
inline ::MpsSORoute_RouteType MpsSORoute::routetype() const {
  // @@protoc_insertion_point(field_get:MpsSORoute.routeType)
  return static_cast< ::MpsSORoute_RouteType >(routetype_);
}
inline void MpsSORoute::set_routetype(::MpsSORoute_RouteType value) {
  
  routetype_ = value;
  // @@protoc_insertion_point(field_set:MpsSORoute.routeType)
}

// -------------------------------------------------------------------

// MpsSPlane

// .MpsSHeader head = 1;
inline bool MpsSPlane::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void MpsSPlane::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::MpsSHeader& MpsSPlane::head() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.head)
  return head_ != NULL ? *head_
                         : *::MpsSHeader::internal_default_instance();
}
inline ::MpsSHeader* MpsSPlane::mutable_head() {
  
  if (head_ == NULL) {
    _slow_mutable_head();
  }
  // @@protoc_insertion_point(field_mutable:MpsSPlane.head)
  return head_;
}
inline ::MpsSHeader* MpsSPlane::release_head() {
  // @@protoc_insertion_point(field_release:MpsSPlane.head)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_head();
  } else {
    ::MpsSHeader* temp = head_;
    head_ = NULL;
    return temp;
  }
}
inline  void MpsSPlane::set_allocated_head(::MpsSHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head != NULL) {
    _slow_set_allocated_head(message_arena, &head);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSPlane.head)
}

// .MpsSPosition pos = 2;
inline bool MpsSPlane::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void MpsSPlane::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::MpsSPosition& MpsSPlane::pos() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.pos)
  return pos_ != NULL ? *pos_
                         : *::MpsSPosition::internal_default_instance();
}
inline ::MpsSPosition* MpsSPlane::mutable_pos() {
  
  if (pos_ == NULL) {
    _slow_mutable_pos();
  }
  // @@protoc_insertion_point(field_mutable:MpsSPlane.pos)
  return pos_;
}
inline ::MpsSPosition* MpsSPlane::release_pos() {
  // @@protoc_insertion_point(field_release:MpsSPlane.pos)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pos();
  } else {
    ::MpsSPosition* temp = pos_;
    pos_ = NULL;
    return temp;
  }
}
inline  void MpsSPlane::set_allocated_pos(::MpsSPosition* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos != NULL) {
    _slow_set_allocated_pos(message_arena, &pos);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MpsSPlane.pos)
}

// float roll = 3;
inline void MpsSPlane::clear_roll() {
  roll_ = 0;
}
inline float MpsSPlane::roll() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.roll)
  return roll_;
}
inline void MpsSPlane::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:MpsSPlane.roll)
}

// float pitch = 4;
inline void MpsSPlane::clear_pitch() {
  pitch_ = 0;
}
inline float MpsSPlane::pitch() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.pitch)
  return pitch_;
}
inline void MpsSPlane::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:MpsSPlane.pitch)
}

// float yaw = 5;
inline void MpsSPlane::clear_yaw() {
  yaw_ = 0;
}
inline float MpsSPlane::yaw() const {
  // @@protoc_insertion_point(field_get:MpsSPlane.yaw)
  return yaw_;
}
inline void MpsSPlane::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:MpsSPlane.yaw)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MpsSWeather_WType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MpsSWeather_WType>() {
  return ::MpsSWeather_WType_descriptor();
}
template <> struct is_proto_enum< ::MpsSWeather_WClass> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MpsSWeather_WClass>() {
  return ::MpsSWeather_WClass_descriptor();
}
template <> struct is_proto_enum< ::MpsSArea_AreaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MpsSArea_AreaType>() {
  return ::MpsSArea_AreaType_descriptor();
}
template <> struct is_proto_enum< ::MpsSBLine_LineType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MpsSBLine_LineType>() {
  return ::MpsSBLine_LineType_descriptor();
}
template <> struct is_proto_enum< ::MpsSORoute_RouteType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MpsSORoute_RouteType>() {
  return ::MpsSORoute_RouteType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mps_5fcoordinate_2eproto__INCLUDED
